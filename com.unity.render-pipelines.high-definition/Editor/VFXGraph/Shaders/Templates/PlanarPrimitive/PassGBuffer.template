Pass
{		
	Tags { "LightMode"="GBuffer" }
	
	Stencil
	{
		WriteMask 7
		Ref  2
		Comp Always
		Pass Replace
	}	
		
	HLSLPROGRAM
	#pragma target 4.5
	
	#pragma multi_compile _ LIGHT_LAYERS
	#pragma multi_compile _ DEBUG_DISPLAY
	
	#define UNITY_MATERIAL_LIT
		
	${VFXInclude("Shaders/RenderPipeline/HDRP/VFXLitVaryings.template")}		
		
	struct ps_input
	{
		float4 pos : SV_POSITION;
		
		${VFXHDRPLitDeclareVaryings}
		
		#if USE_FLIPBOOK_INTERPOLATION
		float4 uv : TEXCOORD1;
		#else
		float2 uv : TEXCOORD1;	
		#endif
		#if USE_SOFT_PARTICLE || USE_ALPHA_TEST || USE_FLIPBOOK_INTERPOLATION
		// x: inverse soft particles fade distance
		// y: alpha threshold
		// z: frame blending factor
		VFX_OPTIONAL_INTERPOLATION float3 builtInInterpolants : TEXCOORD2;
		#endif
		#if USE_FLIPBOOK_MOTIONVECTORS
		// x: motion vector scale u
		// y: motion vector scale v
		VFX_OPTIONAL_INTERPOLATION float2 builtInInterpolants2 : TEXCOORD3;
		#endif
		VFX_OPTIONAL_INTERPOLATION float3 normal : TEXCOORD4;
		#if USE_NORMAL_MAP || USE_NORMAL_BENDING || SHADERGRAPH_NEEDS_TANGENT_GBUFFER
		VFX_OPTIONAL_INTERPOLATION float3 tangent : TEXCOORD5;
		#endif
		#if USE_NORMAL_BENDING
		float2 bentFactors : TEXCOORD6;
		#endif

		UNITY_VERTEX_OUTPUT_STEREO
	};
	
${VFXHDRPLitVaryingsMacros}		
	
#define VFX_VARYING_PS_INPUTS ps_input
#define VFX_VARYING_POSCS pos
#define VFX_VARYING_INVSOFTPARTICLEFADEDISTANCE builtInInterpolants.x
#define VFX_VARYING_ALPHATHRESHOLD builtInInterpolants.y
#define VFX_VARYING_FRAMEBLEND builtInInterpolants.z
#define VFX_VARYING_MOTIONVECTORSCALE builtInInterpolants2.xy
#define VFX_VARYING_UV uv
#define VFX_VARYING_NORMAL normal
#if USE_NORMAL_MAP || USE_NORMAL_BENDING || SHADERGRAPH_NEEDS_TANGENT_GBUFFER
#define VFX_VARYING_TANGENT tangent
#endif
#if USE_NORMAL_BENDING
#define VFX_VARYING_BENTFACTORS bentFactors
#endif

${VFXBegin:VFXVertexAdditionalProcess}
${VFXHDRPLitFillVaryings}
${VFXEnd}
	
	${VFXInclude("Shaders/ParticlePlanarPrimitives/Pass.template")}
	#define SHADERPASS SHADERPASS_GBUFFER
	${VFXInclude("Shaders/RenderPipeline/HDRP/VFXLit.template")}
			
    ${SHADERGRAPH_PIXEL_CODE_GBUFFER}
	#pragma fragment frag
	void frag(ps_input i, OUTPUT_GBUFFER(outGBuffer)
	#if USE_DOUBLE_SIDED
	, bool frontFace : SV_IsFrontFace
	#endif
	)
	{
		UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(i);
		VFXTransformPSInputs(i);
		${VFXComputeNormalWS}

        #ifdef VFX_SHADERGRAPH
            SurfaceData surface = (SurfaceData)0;
            BuiltinData builtin = (BuiltinData)0;
            
            ${SHADERGRAPH_PIXEL_CALL_GBUFFER}
            #if HAS_SHADERGRAPH_PARAM_SMOOTHNESS
                surface.perceptualSmoothness = OUTSG.${SHADERGRAPH_PARAM_SMOOTHNESS};
            #endif
            #if HAS_SHADERGRAPH_PARAM_METALLIC
                surface.metallic = OUTSG.${SHADERGRAPH_PARAM_METALLIC};
            #endif
            #if HAS_SHADERGRAPH_PARAM_BASECOLOR
                surface.baseColor = OUTSG.${SHADERGRAPH_PARAM_BASECOLOR};
            #endif
            
            surface.normalWS = normalWS;
            #if HAS_SHADERGRAPH_PARAM_ALPHA
                builtin.opacity = OUTSG.${SHADERGRAPH_PARAM_ALPHA};
            #endif
            #if HAS_SHADERGRAPH_PARAM_EMISSIVE
                builtin.emissiveColor = OUTSG.${SHADERGRAPH_PARAM_EMISSIVE};
            #endif
        
            ENCODE_INTO_GBUFFER(surface, builtin, i.VFX_VARYING_POSCS.xy, outGBuffer);
        #else
            VFXComputePixelOutputToGBuffer(i,normalWS,uvData,outGBuffer);
        #endif
	}
	ENDHLSL
}
